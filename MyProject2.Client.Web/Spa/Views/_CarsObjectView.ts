//-------------------------------------------------------------------------
// This file was AUTO-GENERATED by an Xomega.Net generator.
//
// Changes to this file WILL BE LOST if the code is regenerated.
// To make changes to this file, PLEASE RENAME it and remove this caption.
//-------------------------------------------------------------------------

import $ = require("jquery");
import ko = require("knockout");
import router = require("plugins/router");
import xomega = require("xomega");
import _DOCarsObject = require("Spa/DataObjects/_DOCarsObject");
import _Cars = require("Spa/ServiceContracts/_Cars");
import utils = require("Spa/utils");

class CarsObjectView
{
    public obj: _DOCarsObject.CarsObject = new _DOCarsObject.CarsObject();
    public isNew = ko.observable(true);

    public activate(Id, query) {
        this.obj.Id.InternalValue(Id);
        this.isNew(this.obj.Id.isNull());

        if (this.isNew())
        {
            this.obj.Id.Required(false);
            this.obj.Modified(false);
        }
        else this.loadData();
    }

    public canDeactivate() {
        // Note: Durandal may call this method twice for some reason.
        if (this.obj && this.obj.Modified()) {
            if (!confirm('Do you want to discard unsaved changes?'))
                return false;
        }
        this.obj = null;
        return true;
    }

    private loadData() {
        var url;
        url = this.obj.formatUrl("/cars/{id}");
        $.ajax(url, {
            success: function (data, textStatus, jqXHR) {
                var json = (<any>jqXHR).responseJSON;
                this.obj.fromJSON(json);
            },
            error: (jqXHR, textStatus, errorThrow) => {
                this.obj.ValidationErrors.mergeWith(xomega.ErrorList.fromErrorResponse(jqXHR, errorThrow));
            },
            context: this
        });
    }

    public onSave() {
        this.obj.validate(true);
        if (this.obj.ValidationErrors.hasErrors()) return;

        var url;

        if (this.isNew()) {
            url = this.obj.formatUrl("/cars");
            $.ajax(url, {
                type: "POST",
                data: this.obj.toJSON(new _Cars.Cars_CreateInput()),
                success: function (data, textStatus, jqXHR) {
                    var json = (<any>jqXHR).responseJSON;
                    this.obj.fromJSON(json);
                    this.isNew(false);
                    this.obj.Modified(false);
                    this.onSaved();
                },
                error: (jqXHR, textStatus, errorThrow) => {
                    this.obj.ValidationErrors.mergeWith(xomega.ErrorList.fromErrorResponse(jqXHR, errorThrow));
                },
                context: this
            });
        } else {
            url = this.obj.formatUrl("/cars/{id}");
            $.ajax(url, {
                type: "PUT",
                data: this.obj.toJSON(new _Cars.Cars_UpdateInput_Data()),
                success: function (data, textStatus, jqXHR) {
                    var json = (<any>jqXHR).responseJSON;
                    this.obj.fromJSON(json);
                    this.obj.Modified(false);
                    this.onSaved();
                },
                error: (jqXHR, textStatus, errorThrow) => {
                    this.obj.ValidationErrors.mergeWith(xomega.ErrorList.fromErrorResponse(jqXHR, errorThrow));
                },
                context: this
            });
        }
    }

    public onDelete() {
        if (!confirm("Are you sure you want to delete this object?\nThis operation cannot be undone.")) return;

        var url;
        url = this.obj.formatUrl("/cars/{id}");
        $.ajax(url, {
            type: "DELETE",
            success: function (data, textStatus, jqXHR) {
                this.onSaved();
                this.onClose();
            },
            error: (jqXHR, textStatus, errorThrow) => {
                this.obj.ValidationErrors.mergeWith(xomega.ErrorList.fromErrorResponse(jqXHR, errorThrow));
            },
            context: this
        });
    }

    public onClose() {
        router.navigateBack();
    }

    private onSaved() {
        var parent = utils.Routing.findParent(this);
        // notify save
        if (parent && parent.onChildDetailsSave)
            parent.onChildDetailsSave();
    }
}

export = CarsObjectView;
