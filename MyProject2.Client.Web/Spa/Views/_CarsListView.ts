//-------------------------------------------------------------------------
// This file was AUTO-GENERATED by an Xomega.Net generator.
//
// Changes to this file WILL BE LOST if the code is regenerated.
// To make changes to this file, PLEASE RENAME it and remove this caption.
//-------------------------------------------------------------------------

import $ = require("jquery");
import ko = require("knockout");
import router = require("plugins/router");
import xomega = require("xomega");
import _DOCarsCriteria = require("Spa/DataObjects/_DOCarsCriteria");
import _DOCarsList = require("Spa/DataObjects/_DOCarsList");
import utils = require("Spa/utils");

class CarsListView {

    public router: DurandalRouter;
    public criteriaExpanded: KnockoutObservable<boolean> = ko.observable<boolean>(true);
    public Criteria: _DOCarsCriteria.CarsCriteria = new _DOCarsCriteria.CarsCriteria();
    public Results: _DOCarsList.CarsList = new _DOCarsList.CarsList();
    public appliedCriteriaTooltip: KnockoutComputed<any>;
    private query: string = null;

    constructor() {
        this.Results.CriteriaObject = this.Criteria;
        this.reset(); // reset criteria to initialize the values, which allows validation
        this.appliedCriteriaTooltip = ko.computed(function () {
            return utils.UI.appliedCriteriaTooltip(this.Results.AppliedCriteria());
        }, this);
        this.router = router.createChildRouter()
            .makeRelative({ fromParent: true })
            .map(utils.Routing.findRootRoute('CarsObject/value'))
            .buildNavigationModel();
    }

    public activate(route, query) {
        if (!route) {
            this.router.activeItem(null);
            this.router.updateDocumentTitle(router.activeItem(), router.activeInstruction()); // update title for empty child route
            this.run(query);
        }
    }

    private run(query) {
        var qry: string = router.activeInstruction().queryString;
        if (this.query !== qry) {
            this.query = qry;
            this.Criteria.fromQueryDict(query);
            if (query['run'] === 'true')
                this.search();
            else
                this.reset(false);
        }
    }

    public reset(full: boolean = true) {
        if (full) this.Criteria.reset();
        this.Results.reset();
        this.criteriaExpanded(true);
    }

    public search(auto: boolean = false) {
        this.Criteria.validate(true);
        if (this.Criteria.ValidationErrors.hasErrors()) return;
        var url = "/cars?{criteria}".replace("\{criteria\}", this.Criteria.toUrlParams());

        $.ajax(url, {
            success: function (data, textStatus, jqXHR) {
                var json = (<any>jqXHR).responseJSON;
                this.obj.Results.fromJSON(json);
                if (!this.auto) this.obj.criteriaExpanded(false);
            },
            error: (jqXHR, textStatus, errorThrow) => {
                this.Criteria.ValidationErrors.mergeWith(xomega.ErrorList.fromErrorResponse(jqXHR, errorThrow));
            },
            context: { obj:this, auto:auto }
        });
    }

    public permalink() {
        this.reset(false);
        router.navigate('#' + router.activeInstruction().fragment + '?' + this.Criteria.toUrlParams());
    }

    public onChildDetailsSave() {
        // handle updates of data referenced in the result grid 
        // depending on the details form at a current route

        this.search(true); // in most general case, simply refresh the result
    }
}

export = CarsListView;
