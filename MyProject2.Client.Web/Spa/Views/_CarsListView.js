//-------------------------------------------------------------------------
// This file was AUTO-GENERATED by an Xomega.Net generator.
//
// Changes to this file WILL BE LOST if the code is regenerated.
// To make changes to this file, PLEASE RENAME it and remove this caption.
//-------------------------------------------------------------------------
define(["require", "exports", "jquery", "knockout", "plugins/router", "xomega", "Spa/DataObjects/_DOCarsCriteria", "Spa/DataObjects/_DOCarsList", "Spa/utils"], function (require, exports, $, ko, router, xomega, _DOCarsCriteria, _DOCarsList, utils) {
    "use strict";
    var CarsListView = (function () {
        function CarsListView() {
            this.criteriaExpanded = ko.observable(true);
            this.Criteria = new _DOCarsCriteria.CarsCriteria();
            this.Results = new _DOCarsList.CarsList();
            this.query = null;
            this.Results.CriteriaObject = this.Criteria;
            this.reset(); // reset criteria to initialize the values, which allows validation
            this.appliedCriteriaTooltip = ko.computed(function () {
                return utils.UI.appliedCriteriaTooltip(this.Results.AppliedCriteria());
            }, this);
            this.router = router.createChildRouter()
                .makeRelative({ fromParent: true })
                .map(utils.Routing.findRootRoute('CarsObject/value'))
                .buildNavigationModel();
        }
        CarsListView.prototype.activate = function (route, query) {
            if (!route) {
                this.router.activeItem(null);
                this.router.updateDocumentTitle(router.activeItem(), router.activeInstruction()); // update title for empty child route
                this.run(query);
            }
        };
        CarsListView.prototype.run = function (query) {
            var qry = router.activeInstruction().queryString;
            if (this.query !== qry) {
                this.query = qry;
                this.Criteria.fromQueryDict(query);
                if (query['run'] === 'true')
                    this.search();
                else
                    this.reset(false);
            }
        };
        CarsListView.prototype.reset = function (full) {
            if (full === void 0) { full = true; }
            if (full)
                this.Criteria.reset();
            this.Results.reset();
            this.criteriaExpanded(true);
        };
        CarsListView.prototype.search = function (auto) {
            var _this = this;
            if (auto === void 0) { auto = false; }
            this.Criteria.validate(true);
            if (this.Criteria.ValidationErrors.hasErrors())
                return;
            var url = "/cars?{criteria}".replace("\{criteria\}", this.Criteria.toUrlParams());
            $.ajax(url, {
                success: function (data, textStatus, jqXHR) {
                    var json = jqXHR.responseJSON;
                    this.obj.Results.fromJSON(json);
                    if (!this.auto)
                        this.obj.criteriaExpanded(false);
                },
                error: function (jqXHR, textStatus, errorThrow) {
                    _this.Criteria.ValidationErrors.mergeWith(xomega.ErrorList.fromErrorResponse(jqXHR, errorThrow));
                },
                context: { obj: this, auto: auto }
            });
        };
        CarsListView.prototype.permalink = function () {
            this.reset(false);
            router.navigate('#' + router.activeInstruction().fragment + '?' + this.Criteria.toUrlParams());
        };
        CarsListView.prototype.onChildDetailsSave = function () {
            // handle updates of data referenced in the result grid 
            // depending on the details form at a current route
            this.search(true); // in most general case, simply refresh the result
        };
        return CarsListView;
    }());
    return CarsListView;
});
//# sourceMappingURL=_CarsListView.js.map