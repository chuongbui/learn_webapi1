//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by an Xomega.Net generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
define(["require", "exports"], function (require, exports) {
    "use strict";
    // Generated constants for all enumerations as classes with the enumeration name 
    // stored in a special field EnumName and other items declared as static fields.
    // Additional attributes are declared inside "nested" classes Attributes.
    var Enumerations;
    (function (Enumerations) {
        var Operators = (function () {
            function Operators() {
            }
            Operators.EnumName = "operators";
            Operators.IsNull = "NULL";
            Operators.IsNotNull = "NOTNULL";
            Operators.IsEqualTo = "IS";
            Operators.IsNotEqualTo = "ISNOT";
            Operators.IsOneOf = "ONEOF";
            Operators.IsNoneOf = "NONEOF";
            Operators.IsLessThan = "LESS";
            Operators.IsNotLessThan = "NOTLESS";
            Operators.IsGreaterThan = "GREATER";
            Operators.IsNotGreaterThan = "NOTGREATER";
            Operators.IsEarlierThan = "EARLIER";
            Operators.IsLaterThan = "LATER";
            Operators.IsBetween = "BETWEEN";
            Operators.Contains = "CONT";
            Operators.DoesNotContain = "NOTCONT";
            return Operators;
        }());
        Enumerations.Operators = Operators;
        var Operators;
        (function (Operators) {
            var Attributes = (function () {
                function Attributes() {
                }
                Attributes.SortOrder = "sort order";
                Attributes.AddlProps = "addl props";
                Attributes.Multival = "multival";
                Attributes.Type = "type";
                Attributes.ExcludeType = "exclude type";
                Attributes.NullCheck = "null check";
                return Attributes;
            }());
            Operators.Attributes = Attributes;
        })(Operators = Enumerations.Operators || (Enumerations.Operators = {}));
        var Yesno = (function () {
            function Yesno() {
            }
            Yesno.EnumName = "yesno";
            Yesno.Yes = "true";
            Yesno.No = "false";
            return Yesno;
        }());
        Enumerations.Yesno = Yesno;
    })(Enumerations = exports.Enumerations || (exports.Enumerations = {}));
});
//# sourceMappingURL=Enumerations.js.map